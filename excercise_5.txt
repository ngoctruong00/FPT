Lesson 5
//CÂU 1: byte endian

int n = 42829; // 1010 0111 0100 1101 // A7 4D
// little endian (xuất phát từ "little-end" nghĩa kết thúc nhỏ hơn)
//- 4D A7
// Big endian (xuất phát từ "big-end") thì ngược lại
//- A7 4D


//CÂU 2: chuyển đổi cơ số
//2.1: cơ số 10 sang cơ số 2
// 29 --> 11101 // chia cho 2
// 2.2 chuyển cơ số 10 sang 16 29 --> 1D (chia cho 16)
// 2.3 cơ số 2 sang cơ số 10. Ví dụ 10010101 --> 2^7 + 2^4 + 2^2 + 2^0 = 95
// 2.4 cơ số 16 sang cơ số 2 và ngược lại. Ví dụ 0xA5 --> 10100101, 10010101 --> 0x95

CÂU 3: toggle a specific bit
#include <stdio.h>
#include <math.h>

int bin;
int toggle(int a, int pos){
    int mask = 1 << pos;
    bin = a ^ mask;
    return bin;
}
int main(){
    int a,pos;
    printf("nhap so nhi phan a: \n");
    scanf("%d",&a);
    printf("nhap vi tri: \n");
    scanf("%d",&pos);
    toggle(a,pos);
    toggle(a,pos);
    printf("so sau khi toggle %d",bin);
    return 0;
}

câu 4:
#include <stdio.h>
#include <math.h>
void check_chan_le(unsigned int a){
    if(a % 2 == 0){
        printf("chan");
    }
    else{
        printf("le");
    }
}

int main(){
    unsigned int a;
    printf("nhap a: \n");
    scanf("%d",&a);
    check_chan_le(a);
    return 0;
}


CÂU5: check elements array
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int *arr = (int *)malloc(100*sizeof(int));						// dynamic allocate arr[100]
int dem = 0;													// create a variable to count elements in arr[100]

int change_int_binary(int* &arr,int a){							// change integer to binary
    for(int i = 0; i < 100; i++){								// element arr[i] = divide and get the remainder
        arr[i] = a % 2;
        a = a / 2;
        printf("gia tri cua a: %d\n",a);
        printf("gia tri cua dem: %d\n",dem);
        printf("gia tri cua arr[%d]: %d\n",i,arr[i]);
        dem++;
        if(a == 1){												// value a = 1 so out for()
        	return dem;
		}
		
    }
}
void thu_tu_big_edian(int* &arr,int &dem){						// rearrange the order of the array elements
	for(int i = 0; i < dem/2 ; i++){							// swap positions
		int tmp = arr[i];
		arr[i] = arr[dem-i-1];
		arr[dem-i-1] = tmp;	
	}
	for(int i = 0; i < dem; i++){								// print array
		printf("arr[%d]: %d\n",i,arr[i]);
	}
	printf("so phan tu cua mang: %d \n",dem);					// print total numbers of array elements
}
void check_vitri(int *arr){										// import position need to check
	int check;
	printf("nhap vi tri can kiem tra:");
	scanf("%d",&check);
	printf("phan tu trong mang arr[%d]: %d",check, arr[check]);	// print value need to check
}
int main(){
    if(arr == NULL){
        printf("cannot allocate memory");						// check the memory is dynamic allocated
    }
    else{
	}
    unsigned int a;
    printf("nhap a: ");
    scanf("%d",&a);
    change_int_binary(arr,a);
    printf("gia tri cua dem: %d\n",dem);
    thu_tu_big_edian(arr,dem);
    check_vitri(arr);
    free(arr);													// delete dynamic allocate
    return 0;
}

CÂU6:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int *arr = (int *)malloc(100*sizeof(int));						// dynamic allocate arr[100]
int dem = 0;													// create a variable to count elements in arr[100]

int change_int_binary(int* &arr,int a){							// change integer to binary
    for(int i = 0; i < 100; i++){								// element arr[i] = divide and get the remainder
        arr[i] = a % 2;
        a = a / 2;
        printf("gia tri cua a: %d\n",a);
        printf("gia tri cua dem: %d\n",dem);
        printf("gia tri cua arr[%d]: %d\n",i,arr[i]);
        dem++;
        if(a == 1){												// value a = 1 so out for()
        	return dem;
		}
		
    }
}
void thu_tu_big_edian(int* &arr,int &dem){						// rearrange the order of the array elements
	for(int i = 0; i < dem/2 ; i++){							// swap positions
		int tmp = arr[i];
		arr[i] = arr[dem-i-1];
		arr[dem-i-1] = tmp;	
	}
}
void print_arr(int *arr){
		for(int i = 0; i < dem; i++){								// print array
		printf("arr[%d]: %d\n",i,arr[i]);
	}
	printf("so phan tu cua mang: %d \n",dem);					// print total numbers of array elements
}
void check_vitri(int *arr){										// import position need to check
	int check;
	printf("nhap vi tri can kiem tra:");
	scanf("%d",&check);
	printf("phan tu trong mang arr[%d]: %d\n",check, arr[check]);	// print value need to check
	if(arr[check] == 0){
		arr[check] = 1;
		printf("gia tri luc nay: %d\n", arr[check]);
	}
	else{
		arr[check] = 0;
		printf("gia tri luc nay: %d\n", arr[check]);
	}
}
int main(){
    if(arr == NULL){
        printf("cannot allocate memory");						// check the memory is dynamic allocated
    }
    else{
	}
    unsigned int a;
    printf("nhap a: ");
    scanf("%d",&a);
    change_int_binary(arr,a);
    printf("gia tri cua dem: %d\n",dem);
    thu_tu_big_edian(arr,dem);
    check_vitri(arr);
    print_arr(arr);
    free(arr);													// delete dynamic allocate
    return 0;
}