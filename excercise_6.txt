CÂU1:
create a new array 5x7 and create the pointer to point the first element of the array. loop to printf elements of array
#include <stdio.h>

int main(){
	float a[5][7]= {
		{1,2,3,4,5,6,7},
		{1,2,3,4,5,6,7},
		{1,2,3,4,5,6,7},
		{1,2,3,4,5,6,7},
		{1,2,3,4,5,6,7},
	};
	float *ptr = a[0];
	for(int i = 0; i < 35; i++){
		printf("%f\n",ptr[i]);
	}

    return 0;
}

CÂU2:
#include <stdio.h>
#include <stdlib.h>
int main(){
	// allocate level-1 pointer of 32 short value
	short *ptr = (short*)malloc(32 * sizeof(short));
	
	// declare 2d array 4x8
	short arr[4][8];
	// Assign values from the pointer to the 2D array
	for(int i = 0 ; i < 4 ; i++){
		for(int j = 0 ; j < 8 ; j++){
			arr[i][j] = *ptr;
			ptr++;
		}
	}
//	for(int a = 0; a < 32;a++){
//		printf("dia chi con tro %d\n",ptr++);
//	}
	// print value array
	for(int i = 0 ; i < 4 ; i++){
		for(int j = 0 ; j < 8 ; j++){
			printf("gia tri trong mang %d\n", arr[i][j]);
		}
	}
	// Free the allocated memory
	free(ptr);
    return 0;
}

CÂU3:
#include <stdio.h>
#include <stdlib.h>

//declare fuhction swap() change address 2 pointer
int swap(short **p1, short **p2){
	short *a = *p1;
	*p1 = *p2;
	*p2 = a;
	return 0;
}


int main(){
	// allocate level-1 pointer of 10 short value
	short *p1 = (short*)malloc(10 * sizeof(short));
	
	// allocate level-1 pointer of 20 short value
	short *p2 = (short*)malloc(20 * sizeof(short));

	printf("dia chi truoc %d %d \n", p1, p2);
	// use swap
	swap((short **)&p1, (short **)&p2);

	printf("dia chi sau %d %d", p1, p2);
	// Free the allocated memory
	free(p1);
	free(p2);
    return 0;
}

CÂU4:
#include <stdio.h>

// Define a structure to hold different data types
struct Element {
    int intValue;
    float floatValue;
    char charValue;
};

int main() {
    // Declare an array of structures to hold different data types
    struct Element dataArray[5];

    // Initialize the elements with different values
    dataArray[0].intValue = 10;
    dataArray[1].floatValue = 3.14;
    dataArray[2].charValue = 'A';
    // You can continue initializing the remaining elements...

    // Access and print the values
    printf("Value at index 0 (int): %d\n", dataArray[0].intValue);
    printf("Value at index 1 (float): %.2f\n", dataArray[1].floatValue);
    printf("Value at index 2 (char): %c\n", dataArray[2].charValue);
    // You can continue accessing and printing the values for other elements...

    return 0;
}

CÂU5:
#include <stdio.h>
#include <stdarg.h>

// Function to sum two matrices with fixed arguments
void SumArrFixed(int result[5][7], int arr1[5][7], int arr2[5][7]) {
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 7; j++) {
            result[i][j] = arr1[i][j] + arr2[i][j];
        }
    }
}

// Function to sum two matrices with half-fixed arguments
void SumArrHalfFixed(int result[][7], int arr1[][7], int arr2[][7], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = arr1[i][j] + arr2[i][j];
        }
    }
}

// Function to print a matrix
void printMatrix(int rows, int cols, int matrix[rows][cols]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int arr1[5][7] = {
		{1, 2, 3, 4, 5, 6, 7},
		{1, 2, 3, 4, 5, 6, 7},
		{1, 2, 3, 4, 5, 6, 7},
		{1, 2, 3, 4, 5, 6, 7},
		{1, 2, 3, 4, 5, 6, 7}};

    int arr2[5][7] = {
		{-1, -2, -3, -4, -5, -6, -7},
		{1, 2, 3, 4, 5, 6, 7},
		{-1, -2, -3, -4, -5, -6, -7},
		{1, 2, 3, 4, 5, 6, 7},
		{-1, -2, -3, -4, -5, -6, -7}};

    int result[5][7];

    // Method 1: Fixed arguments
    SumArrFixed(result, arr1, arr2);
    printf("Method 1 (Fixed Arguments):\n");
    printMatrix(5, 7, result);
    printf("\n");

    // Method 2: Half-fixed arguments
    SumArrHalfFixed(result, arr1, arr2, 5, 7);
    printf("Method 2 (Half-Fixed Arguments):\n");
    printMatrix(5, 7, result);
    printf("\n");

    return 0;
}
